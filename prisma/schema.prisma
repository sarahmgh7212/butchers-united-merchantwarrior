// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

// ----------- Users -----------

enum InviteStatus {
  ACTIVE
  USED
  CANCELLED
}

model Invite {
  @@map(name: "users_invites")
  id                                 String             @id @default(dbgenerated())
  first_opened_at                    DateTime?
  status                             InviteStatus   @default(ACTIVE)
  expires_at                         DateTime
  email                              String

  inviter_id                         String
  business_id                        String
  user_id                            String?

  createdAt                          DateTime           @default(now()) @map("created_at")
  updatedAt                          DateTime           @default(now()) @map("udpated_at")
  deletedAt                          DateTime?          @map("deleted_at")

  inviter                            User               @relation(name: "InvitesCreated",fields: [inviter_id], references: [id])
  business                           Business           @relation(fields: [business_id], references: [id])
  user                               User?              @relation(name: "Invites",fields: [user_id], references: [id])
}

enum UserStatus {
  ACTIVE
  DISABLED
}

model User {
  @@map(name: "users_users")
  id                                 String             @id @default(dbgenerated())
  name                               String
  mobile_number                      String?            @unique
  notifications_provider_id          String?
  auth_provider_id                   String             @unique
  email                              String             @unique
  notification_settings              Json               @default("{\"sms\": true, \"web\": false, \"mobile\": false, \"welcome\": false, \"sysGenerated\": true}")
  status                             UserStatus         @default(ACTIVE)
  email_verified_at                  DateTime?
  tags                               Json?
  notes                              String?
  
  createdAt                          DateTime           @default(now()) @map("created_at")
  updatedAt                          DateTime           @default(now()) @map("udpated_at")
  deletedAt                          DateTime?          @map("deleted_at")

  invitesCreated                     Invite[]           @relation("InvitesCreated")
  invites                            Invite[]           @relation("Invites")
  customer                           Customer?
  passwordResets                     PasswordReset[]
  businesses                         Business[]         @relation("businesses_businesses_users")
  ordersPlaced                       Order[]            @relation("OrdersPlaced")
}

enum PasswordResetStatus {
  ACTIVE
  USED
  CANCELLED
}

model PasswordReset {
  @@map(name: "users_password_resets")
  id                                 String               @id @default(dbgenerated())
  access_code                        String
  status                             PasswordResetStatus  @default(ACTIVE)
  expires_at                         DateTime

  user_id                            String

  createdAt                          DateTime             @default(now()) @map("created_at")
  updatedAt                          DateTime             @default(now()) @map("udpated_at")

  user                               User                 @relation(fields: [user_id], references: [id])
}

// ----------- Customers -----------

enum CustomerableType {
  USER
  BUSINESS
}

model Customer {
  @@map(name: "customers_customers")
  id                                 String             @id @default(dbgenerated())
  customerable_id                    String?
  customerable_type                  CustomerableType
  tags                               Json?

  createdAt                          DateTime           @default(now()) @map("created_at")
  updatedAt                          DateTime           @default(now()) @map("udpated_at")
  deletedAt                          DateTime?          @map("deleted_at")

  user                               User?              @relation(fields: [customerable_id], references: [id])
  business                           Business?          @relation(fields: [customerable_id], references: [id])
}

// ----------- Businesses -----------

enum BusinessStatus {
  ACTIVE
  DISABLED
}

model Business {
  @@map(name: "businesses_businesses")
  id                                  String            @id @default(dbgenerated())
  name                                String
  abn                                 String            @unique
  logo_uri                            String?
  status                              BusinessStatus    @default(ACTIVE)
  contact_email                       String?
  contact_phone                       String?

  // fd_location_id                      String?

  createdAt                           DateTime          @default(now()) @map("created_at")
  updatedAt                           DateTime          @default(now()) @map("udpated_at")
  deletedAt                           DateTime?         @map("deleted_at")


  // baiada_ship_to                     String?
  // mcos                               Float?

  customer                            Customer?
  users                               User[]            @relation("businesses_businesses_users")
  suppliedProducts                    Product[]         @relation("SuppliedProducts")
  manufacturedProducts                Product[]         @relation("ManufacturedProducts")
  suppliedOrders                      Order[]           @relation("SuppliedOrders")
  ownBrands                           Brand[]           @relation("OwnBrands")                              
}

// ----------- Products -----------

enum ProductStatus {
  ACTIVE
  DISABLED
}

model Product {
  @@map(name: "products_products")

  id                                  String   @id @default(dbgenerated())
  name                                String
  description                         String
  external_reference                  String?
  status                              ProductStatus @default(ACTIVE)

  order_units_id                      String
  invoice_units_id                    String

  is_estimated_qty                    Boolean? @default(false)
  fd_supplier_id                      String
  fd_manufacturer_id                  String?
  brand_id                            String?
  tags                                Json?

  createdAt                           DateTime         @default(now()) @map("created_at")
  updatedAt                           DateTime         @default(now()) @map("udpated_at")
  deletedAt                           DateTime?        @map("deleted_at")

  collections                         Collection[]     @relation("products_collections_products")
  media                               Media[]          @relation("products_media_products")
  variants                            Variant[]
  brand                               Brand?           @relation(fields: [brand_id], references: [id])
  supplier                            Business         @relation(name: "SuppliedProducts", fields: [fd_supplier_id], references: [id])
  manufacturer                        Business?        @relation(name: "ManufactureredProducts", fields: [fd_manufacturer_id], references: [id])
  orderUnit                           ProductUnit     @relation(name: "OrderedProducts", fields: [order_units_id], references: [id])
  invoiceUnit                         ProductUnit     @relation(name: "InvoicedProducts", fields: [invoice_units_id], references: [id])
}

enum VariantStatus {
  ACTIVE
  DISABLED
}

model Variant {
  @@map(name: "products_variant")

  id                                  String         @id @default(dbgenerated())
  status                              VariantStatus  @default(ACTIVE)
  description                         String
  sellEx                              Float  @map("sell_ex")
  sellGst                             Float  @map("sell_gst")
  costEx                              Float  @map("cost_ex")
  costGst                             Float  @map("cost_gst")
  qtyAvailable                        Int  @map("qty_available")
  qtySold                             Int      @default(0)  @map("qty_sold")
  availableDate                       DateTime  @map("available_date")
  invoiceToOrderRatio                 Float      @map("invoice_to_order_ratio")     
  stepQty                             Int  @map("step_qty")
  minimumQty                          Float  @map("minimum_qty")

  // Do units belong here

  product_id                          String
  discount_id                         String
  
  createdAt                           DateTime       @default(now()) @map("created_at")
  updatedAt                           DateTime       @default(now()) @map("udpated_at")
  deletedAt                           DateTime?      @map("deleted_at")

  product                             Product        @relation(fields: [product_id], references: [id])
  discount                            Discount       @relation(fields: [discount_id], references: [id])
  availabilityRules                   AvailabilityRule[]
}

enum AvailabilityRulesStatus {
  ACTIVE
  DISABLED
}

enum RuleType {
  REGIONS
  CUSTOMER_TYPE
  CUSTOMER_IDS
  TAGS
}

model AvailabilityRule {
  @@map(name: "products_availability_rule")

  id                                  String         @id @default(dbgenerated())
  status                              AvailabilityRulesStatus @default(ACTIVE)
  type                                RuleType
  regionIds                           String[]      @map("region_ids")
  customerType                        String?       @map("customer_type")
  customerIds                         String[]       @map("customer_ids")
  tags                                String[]

  variant_id                          String
  
  createdAt                           DateTime @default(now()) @map("created_at")
  updatedAt                           DateTime @default(now()) @map("udpated_at")
  deletedAt                           DateTime? @map("deleted_at")

  variant                             Variant        @relation(fields: [variant_id], references: [id])
}

enum DiscountStatus {
  ACTIVE
  DISABLED
}

model Discount {
  @@map(name: "products_discount")
  id                                  String         @id @default(dbgenerated())
  name                                String
  status                              DiscountStatus  @default(ACTIVE)
  startAt                             DateTime?   @map("start_at")        
  endAt                               DateTime?   @map("end_at")

  createdAt                           DateTime @default(now()) @map("created_at")
  updatedAt                           DateTime @default(now()) @map("udpated_at")
  deletedAt                           DateTime? @map("deleted_at")

  variants                            Variant[]
  discountValues                      DiscountValue[]
}

enum DiscountValueType {
  AMOUNT
  PERCENTAGE
}

model DiscountValue {
  @@map(name: "products_discount_value")
  id                                  String         @id @default(dbgenerated())
  type                                DiscountValueType
  gtQty                               Float          @default(0)
  ltQty                               Float          @default(10000000000000000)
  gteTo                               Boolean        @default(false)
  lteTo                               Boolean        @default(false)
  value                               Float

  discount_id                         String

  createdAt                           DateTime @default(now()) @map("created_at")
  updatedAt                           DateTime @default(now()) @map("udpated_at")
  deletedAt                           DateTime? @map("deleted_at")

  discount                            Discount      @relation(fields: [discount_id], references: [id])
}

enum BrandStatus {
  ACTIVE
  DISABLED
}

model Brand {
  @@map(name: "products_brands")

  id                                  String       @id @default(dbgenerated())
  status                              BrandStatus  @default(ACTIVE)
  name                                String
  logo_id                             String
  supplier_id                         String?

  createdAt                           DateTime    @default(now()) @map("created_at")
  updatedAt                           DateTime    @default(now()) @map("udpated_at")
  deletedAt                           DateTime?   @map("deleted_at")

  supplier                            Business?   @relation(name: "OwnBrands", fields: [supplier_id], references: [id])
  logo                                Media       @relation(name: "BrandsUsingLogo", fields: [logo_id], references: [id])
  products                            Product[]
}

enum ProductUnitStatus {
  ACTIVE
  DISABLED
}

model ProductUnit {
  @@map(name: "products_units")
  id                                  String   @id @default(dbgenerated())
  singular                            String
  abbreviation                        String
  status                              ProductUnitStatus  @default(ACTIVE)

  createdAt                           DateTime @default(now()) @map("created_at")
  updatedAt                           DateTime @default(now()) @map("udpated_at")
  deletedAt                           DateTime? @map("deleted_at")
  
  purchasedProducts                   Product[] @relation("PurchasedProducts")
  invoicedProducts                    Product[] @relation("InvoicedProducts")
}

enum CollectionStatus {
  ACTIVE
  DISABLED
}

model Collection {
  @@map(name: "products_collections")
  id                                  String          @id @default(dbgenerated())
  name                                String
  description                         String
  status                              CollectionStatus  @default(ACTIVE)
  tags                                Json?
  logo_id                             String

  createdAt                           DateTime?      @default(now()) @map("created_at")
  updatedAt                           DateTime?      @default(now()) @map("udpated_at")
  deletedAt                           DateTime?      @map("deleted_at")

  logo                                Media          @relation(name: "CollectionsUsingLogo", fields: [logo_id], references: [id])
  media                               Media[]        @relation("products_collections_media")
  products                            Product[]      @relation("products_collections_products")
}

enum MediaStatus {
  ACTIVE
  DISABLED
}

enum MediaType {
  IMAGE
  VIDEO
}

model Media {
  @@map(name: "products_media")
  id                                  String          @id @default(dbgenerated())
  status                              MediaStatus     @default(ACTIVE)
  label                               String
  type                                MediaType       
  business_id                         String
  
  createdAt                           DateTime        @default(now()) @map("created_at")
  updatedAt                           DateTime        @default(now()) @map("udpated_at")
  deletedAt                           DateTime?       @map("deleted_at")

  products                            Product[]
  collections                         Collection[]    @relation("products_collections_media")
  brandsUsingLogo                     Brand[]         @relation("BrandsUsingLogo")                     
  collectionsUsingLogo                Collection[]    @relation("CollectionsUsingLogo")
}

// ----------- Orders -----------

model OrderItem {
  @@map(name: "orders_order_items")
  id                                  String         @id @default(dbgenerated())
  qty_ordered                         Int
  qty_received                        Int?
  sell_ex                             Float
  sell_gst                            Float
  is_estimate                         Boolean
  product_blob                        Json?

  order_id                            String
  fd_variant_id                       String

  createdAt                          DateTime      @default(now()) @map("created_at")
  updatedAt                          DateTime      @default(now()) @map("udpated_at")
  deletedAt                          DateTime?     @map("deleted_at")

  order                              Order         @relation(fields: [order_id], references: [id])
  variant                            Variant       @relation(fields: [fd_variant_id], references: [id])
}

model Order {
  @@map(name: "orders_orders")
  
  id                              String        @id @default(dbgenerated())
  order_ref                       Int         @default(autoincrement())
  completedAt                     DateTime?     @map("completed_at")
  shippedAt                       DateTime?     @map("shipped_at")
  packedAt                        DateTime?     @map("packed_at")
  processedAt                     DateTime?     @map("processed_at")
  paidAt                          DateTime?     @map("paid_at")

  fd_delivery_location_id       String
  fd_customer_id                  String
  fd_supplier_id                  String
  fd_orderer_id                   String

  createdAt                       DateTime      @default(now()) @map("created_at")
  updatedAt                       DateTime      @default(now()) @map("udpated_at")
  deletedAt                       DateTime?     @map("deleted_at")

  supplier                        Business      @relation(name: "SuppliedOrders", fields: [fd_supplier_id], references: [id])
  customer                        Customer      @relation(fields: [fd_customer_id], references: [id])
  orderer                         User          @relation(name: "OrdersPlaced", fields: [fd_orderer_id], references: [id])
  deliveryLocation                Place         @relation(fields: [fd_delivery_location_id], references: [id])
}

model Cart {
  @@map(name: "orders_carts")
  id                              String   @id @default(dbgenerated())
  data                            Json

  fd_customer_id                  String
  fd_user_id                      String

  customer                        Customer      @relation(fields: [fd_customer_id], references: [id])
  user                            User          @relation(fields: [fd_user_id], references: [id])
}

model Invoice {
  @@map(name: "orders_invoices")
  id                              String        @id @default(dbgenerated())
  invoiceRef                     Int           @default(autoincrement()) @map("invoice_ref")
  generatedFileUrl                String        @map("generated_file_url")

  order_id                        String
  
  createdAt                       DateTime      @default(now()) @map("created_at")
  updatedAt                       DateTime      @default(now()) @map("udpated_at")
  deletedAt                       DateTime?     @map("deleted_at")

  order                           Order         @relation(fields: [order_id], references: [id])
}

// ----------- Payments -----------

enum PaymentMethodStatus {
  ACTIVE
  DISABLED
}

enum PaymentMethodType {
  CARD
  DIRECT_DEBIT
  ROLLING_ACCOUNT
  SUPPLIER_ACCOUNT
}

model PaymentMethod {
  @@map(name: "payments_payment_methods")
  id                              String        @id @default(dbgenerated())
  type                            PaymentMethodType
  status                          PaymentMethodStatus @default(ACTIVE)
  data                            Json?

  fd_customer_id                  String

  createdAt                       DateTime       @default(now()) @map("created_at")
  updatedAt                       DateTime       @default(now()) @map("udpated_at")
  deletedAt                       DateTime?      @map("deleted_at")
  customer                        Customer       @relation(fields: [fd_customer_id], references: [id])
}

model Payment {
  @@map(name: "payments_payments")
  id                              String         @id @default(dbgenerated())
  receipt_number                  Int?           @default(autoincrement())
  notes                           String?
  amount                          Float?

  // payment_status                  String?        @default("pending")
  // transaction_type                String?        @default("charge")

  payment_method_id             String
  fd_order_id                   String

  createdAt                       DateTime       @default(now()) @map("created_at")
  updatedAt                       DateTime       @default(now()) @map("udpated_at")
  deletedAt                       DateTime?      @map("deleted_at")

  paymentMethod                   PaymentMethod  @relation(fields: [payment_method_id], references: [id])
  order                           Order  @relation(fields: [fd_order_id], references: [id])
}

// ----------- Places -----------

model Place {
  @@map(name: "products_variant")
  id                              String         @id @default(dbgenerated())
  
  createdAt                       DateTime @default(now()) @map("created_at")
  updatedAt                       DateTime @default(now()) @map("udpated_at")
  deletedAt                       DateTime? @map("deleted_at")
}

model Region {
  @@map(name: "products_variant")
  id                              String         @id @default(dbgenerated())
  
  createdAt                       DateTime @default(now()) @map("created_at")
  updatedAt                       DateTime @default(now()) @map("udpated_at")
  deletedAt                       DateTime? @map("deleted_at")
}

// The underlying table does not contain a valid unique identifier and can therefore currently not be handled.
// model businesses_businesses_users {
  // @@map(name: "businesses_businesses_users")
  // id            Int      @default(autoincrement())
  // business_uuid String
  // fd_user_uuid  String
  // createdAt    DateTime @default(now()) @map("created_at")
  // updatedAt    DateTime @default(now()) @map("udpated_at")
  // permissions   Json     @default("{\"role\": \"user\", \"permissions\": {\"edit_all\": false, \"read_all\": true, \"create_all\": false, \"delete_all\": false}}")
// }


// The underlying table does not contain a valid unique identifier and can therefore currently not be handled.
// model locations_locations {
  // @@map(name: "locations_locations")
  /// The value of this field is generated by the database as: `uuid_generate_v1()`.
  // id              String   @id @default(dbgenerated())
  // address_line1    String
  // address_line2    String
  // address_city     String
  // address_postcode String
  // address_state    String
  // name             String
  // This type is currently not supported.
  // coordinates      point
  // updatedAt       DateTime @default(now()) @map("udpated_at")
  // createdAt       DateTime @default(now()) @map("created_at")
// }

// The underlying table does not contain a valid unique identifier and can therefore currently not be handled.
// model notifications_dispatch {
  // @@map(name: "notifications_dispatch")
  /// The value of this field is generated by the database as: `uuid_generate_v1()`.
  // id               String?   @id @default(dbgenerated())
  // notification_type Int?
  // notification_time DateTime?
  // username          String?
  // mobile_number     String?
  // email             String?
  // txt_message       String?
  // mobile_uuid       String?
  // push_message      String?
// }

// model products_collections_products {
//   @@map(name: "products_collections_products")
//   /// The value of this field is generated by the database as: `uuid_generate_v1()`.
//   id             String    @id @default(dbgenerated())
//   collection_uuid String
//   product_uuid    String
//   createdAt      DateTime? @default(now()) @map("created_at")
//   updatedAt      DateTime? @default(now()) @map("udpated_at")
// }


// The underlying table does not contain a valid unique identifier and can therefore currently not be handled.
// model products_promos {
  // @@map(name: "products_promos")
  /// The value of this field is generated by the database as: `uuid_generate_v1()`.
  // id          String   @id @default(dbgenerated())
  // type         String
  // product_uuid String
  // data         Json?
  // createdAt   DateTime @default(now()) @map("created_at")
  // updatedAt   DateTime @default(now()) @map("udpated_at")
// }


// The underlying table does not contain a valid unique identifier and can therefore currently not be handled.
// model users_events {
  // @@map(name: "users_events")
  /// The value of this field is generated by the database as: `uuid_generate_v1()`.
  // id        String   @id @default(dbgenerated())
  // event      String
  // data       Json?
  // user_uuid  String?
  // createdAt DateTime @default(now()) @map("created_at")
  // updatedAt DateTime @default(now()) @map("udpated_at")
// }

// The underlying table does not contain a valid unique identifier and can therefore currently not be handled.


// The underlying table does not contain a valid unique identifier and can therefore currently not be handled.
// model users_users_locations {
  // @@map(name: "users_users_locations")
  // user_uuid         String
  // name              String
  // fd_locations_uuid String
// }
