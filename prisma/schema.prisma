// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  previewFeatures = ["nativeTypes"]
}

// ----------- Users -----------

enum InviteStatus {
  ACTIVE
  REVOKED
}

model Invite {
  @@map(name: "users_invites")
  id                                 String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  firstOpenedAt                      DateTime?                @db.Timestamptz() @map("first_opened_at")
  status                             InviteStatus             @default(ACTIVE)
  expiresAt                          DateTime                 @db.Timestamptz() @map("expires_at")
  email                              String
  consumedAt                         DateTime?                @db.Timestamptz() @map("consumed_at")

  inviterId                          String                   @db.Uuid @map("inviter_id")
  businessId                         String                   @db.Uuid @map("business_id")
  userId                             String?                  @db.Uuid @map("user_id")

  createdAt                          DateTime                 @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                          DateTime                 @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                          DateTime?                @map("deleted_at") @db.Timestamptz()

  inviter                            User                     @relation(name: "InvitesCreated",fields: [inviterId], references: [id])
  business                           Business                 @relation(fields: [businessId], references: [id])
  user                               User?                    @relation(name: "Invites",fields: [userId], references: [id])
}

enum UserStatus {
  ACTIVE
  DISABLED
}

model User {
  @@map(name: "users_users")
  id                                 String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                               String
  mobileNumber                       String?                  @unique @map("mobile_number")
  notificationsProviderId            String?                  @map("notifications_provider_id")
  authProviderId                     String                   @unique @map("auth_provider_id")
  email                              String                   @unique
  notificationSettings               Json                     @default("{\"sms\": true, \"web\": false, \"mobile\": false, \"welcome\": false, \"sysGenerated\": true}") @map("notification_settings")
  status                             UserStatus               @default(ACTIVE)
  emailVerifiedAt                    DateTime?                @db.Timestamptz() @map("email_verified_at")
  tags                               Json?
  notes                              String?
  
  createdAt                          DateTime                 @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                          DateTime                 @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                          DateTime?                @map("deleted_at") @db.Timestamptz()
  
  invitesCreated                     Invite[]                 @relation("InvitesCreated")
  invites                            Invite[]                 @relation("Invites")
  customer                           Customer?
  passwordResets                     PasswordReset[]
  businesses                         BusinessUser[]
  ordersPlaced                       Order[]                  @relation("OrdersPlaced")
}

enum PasswordResetStatus {
  ACTIVE
  CANCELLED
}

model PasswordReset {
  @@map(name: "users_password_resets")
  id                                 String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  accessCode                         String                   @map("access_code")
  status                             PasswordResetStatus      @default(ACTIVE)
  expiresAt                          DateTime                 @db.Timestamptz() @map("expires_at")
  consumedAt                         DateTime?                @db.Timestamptz() @map("consumed_at")                          

  userId                             String                   @db.Uuid @map("user_id")

  createdAt                          DateTime                 @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                          DateTime                 @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt

  user                               User                     @relation(fields: [userId], references: [id])
}

// ----------- Customers -----------

enum CustomerableType {
  USER
  BUSINESS
}

model Customer {
  @@map(name: "customers_customers")
  id                                 String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customerableId                     String?                  @db.Uuid @map("customerable_id")
  customerableType                   CustomerableType         @map("customerable_type")
  tags                               Json?

  createdAt                          DateTime                 @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                          DateTime                 @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                          DateTime?                @map("deleted_at") @db.Timestamptz()

  user                               User?                    @relation(fields: [customerableId], references: [id])
  business                           Business?                @relation(fields: [customerableId], references: [id])
  places                             Place[]                  @relation("customers_customers_places")
}

// ----------- Businesses -----------

enum BusinessStatus {
  ACTIVE
  DISABLED
}

model Business {
  @@map(name: "businesses_businesses")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                                String
  abn                                 String                  @unique
  logoUri                             String?                 @map("logo_uri")
  status                              BusinessStatus          @default(ACTIVE)
  contactEmail                        String?                 @map("contact_email")
  contactPhone                        String?                 @map("contact_phone")
  minInvoiceSize                      Decimal?                @db.Decimal(12,2) @map("min_invoice_size")

  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()

  customer                            Customer?
  users                               BusinessUser[]
  suppliedProducts                    Product[]               @relation("SuppliedProducts")
  manufacturedProducts                Product[]               @relation("ManufacturedProducts")
  suppliedOrders                      Order[]                 @relation("SuppliedOrders")
  ownBrands                           Brand[]                 @relation("OwnBrands")                              
}

enum BusinessUserRoles {
  READER
  ORDERER
  ADMIN
}

model BusinessUser {
  @@map(name: "businesses_businesses_users")
  businessId                          String                  @db.Uuid @map("business_id")
  fdUserId                            String                  @db.Uuid @map("fd_user_id")
  role                                BusinessUserRoles

  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt

  @@id([businessId, fdUserId])
}

// ----------- Products -----------

enum ProductStatus {
  ACTIVE
  DISABLED
}

model Product {
  @@map(name: "products_products")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                                String
  description                         String
  externalReference                   String?                 @map("external_reference")
  status                              ProductStatus           @default(ACTIVE)
  isEstimatedQty                      Boolean?                @default(false) @map("is_estimated_qty")
  tags                                Json?

  orderUnitsId                        String                  @db.Uuid @map("order_units_id")
  invoiceUnitsId                      String                  @db.Uuid @map("invoice_units_id")
  fdSupplierId                        String                  @db.Uuid @map("fd_supplier_id")
  fdManufacturerId                    String?                 @db.Uuid @map("fd_manufacturer_id")
  brandId                             String?                 @db.Uuid @map("brand_id")

  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()

  collections                         Collection[]            @relation("products_collections_products")
  media                               Media[]                 @relation("products_media_products")
  variants                            Variant[]
  brand                               Brand?                  @relation(fields: [brandId], references: [id])
  supplier                            Business                @relation(name: "SuppliedProducts", fields: [fdSupplierId], references: [id])
  manufacturer                        Business?               @relation(name: "ManufactureredProducts", fields: [fdManufacturerId], references: [id])
  orderUnit                           ProductUnit             @relation(name: "OrderedProducts", fields: [orderUnitsId], references: [id])
  invoiceUnit                         ProductUnit             @relation(name: "InvoicedProducts", fields: [invoiceUnitsId], references: [id])
}

enum VariantStatus {
  ACTIVE
  DISABLED
}

model Variant {
  @@map(name: "products_variant")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status                              VariantStatus           @default(ACTIVE)
  description                         String
  sellEx                              Decimal                 @db.Decimal(12,2)  @map("sell_ex")
  sellGst                             Decimal                 @db.Decimal(12,2)  @map("sell_gst")
  costEx                              Decimal                 @db.Decimal(12,2)  @map("cost_ex")
  costGst                             Decimal                 @db.Decimal(12,2)  @map("cost_gst")
  qtyAvailable                        Int                     @map("qty_available")
  qtySold                             Int                     @default(0)  @map("qty_sold")
  availableDate                       DateTime                @map("available_date") @db.Timestamptz()
  invoiceToOrderRatio                 Decimal                 @db.Decimal(15,5)      @map("invoice_to_order_ratio")     
  stepQty                             Int                     @map("step_qty")
  minimumQty                          Decimal                 @db.Decimal(15,5)  @map("minimum_qty")

  productId                          String                  @db.Uuid @map("product_id")
  discountId                         String                  @db.Uuid @map("discount_id")
  
  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()

  product                             Product                 @relation(fields: [productId], references: [id])
  discount                            Discount                @relation(fields: [discountId], references: [id])
  availabilityRules                   AvailabilityRule[]
}

enum AvailabilityRulesStatus {
  ACTIVE
  DISABLED
}

enum RuleType {
  REGIONS
  CUSTOMER_TYPE
  CUSTOMER_IDS
  TAGS
}

model AvailabilityRule {
  @@map(name: "products_availability_rule")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status                              AvailabilityRulesStatus @default(ACTIVE)
  type                                RuleType
  regionIds                           String[]                @map("region_ids")
  customerType                        String?                 @map("customer_type")
  customerIds                         String[]                @map("customer_ids")
  tags                                String[]

  variantId                           String                  @db.Uuid @map("variant_id")
  
  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()

  variant                             Variant                 @relation(fields: [variantId], references: [id])
}

enum DiscountStatus {
  ACTIVE
  DISABLED
}

model Discount {
  @@map(name: "products_discount")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                                String
  status                              DiscountStatus          @default(ACTIVE)
  startAt                             DateTime?               @map("start_at")         @db.Timestamptz()
  endAt                               DateTime?               @map("end_at") @db.Timestamptz()

  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()

  variants                            Variant[]
  discountValues                      DiscountValue[]
}

enum DiscountValueType {
  AMOUNT
  PERCENTAGE
}

model DiscountValue {
  @@map(name: "products_discount_value")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type                                DiscountValueType
  gtQty                               Decimal                 @db.Decimal(15,5)          @default(0)
  ltQty                               Decimal                 @db.Decimal(15,5)          @default(10000000000000000)
  gteTo                               Boolean                 @default(false)
  lteTo                               Boolean                 @default(false)
  value                               Decimal                 @db.Decimal(12,2)

  discountId                          String                  @db.Uuid @map("discount_id")

  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()

  discount                            Discount                @relation(fields: [discountId], references: [id])
}

enum BrandStatus {
  ACTIVE
  DISABLED
}

model Brand {
  @@map(name: "products_brands")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status                              BrandStatus             @default(ACTIVE)
  name                                String
  logoId                              String                  @db.Uuid @map("logo_id")
  supplierId                          String?                 @db.Uuid @map("supplier_id")

  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()

  supplier                            Business?               @relation(name: "OwnBrands", fields: [supplierId], references: [id])
  logo                                Media                   @relation(name: "BrandsUsingLogo", fields: [logoId], references: [id])
  products                            Product[]
}

enum ProductUnitStatus {
  ACTIVE
  DISABLED
}

model ProductUnit {
  @@map(name: "products_units")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  singular                            String
  abbreviation                        String
  status                              ProductUnitStatus       @default(ACTIVE)

  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()
  
  purchasedProducts                   Product[]               @relation("PurchasedProducts")
  invoicedProducts                    Product[]               @relation("InvoicedProducts")
}

enum CollectionStatus {
  ACTIVE
  DISABLED
}

model Collection {
  @@map(name: "products_collections")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                                String
  description                         String
  status                              CollectionStatus        @default(ACTIVE)
  tags                                Json?
  logoId                              String                  @db.Uuid @map("logo_id")

  createdAt                           DateTime?               @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime?               @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()

  logo                                Media                   @relation(name: "CollectionsUsingLogo", fields: [logoId], references: [id])
  media                               Media[]                 @relation("products_collections_media")
  products                            Product[]               @relation("products_collections_products")
}

enum MediaStatus {
  ACTIVE
  DISABLED
}

enum MediaType {
  IMAGE
  VIDEO
}

model Media {
  @@map(name: "products_media")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status                              MediaStatus             @default(ACTIVE)
  label                               String
  type                                MediaType       
  businessId                          String                  @db.Uuid @map("business_id")
  
  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()

  business                            Business                @relation(fields: [businessId], references: [id]) 
  products                            Product[]
  collections                         Collection[]            @relation("products_collections_media")
  brandsUsingLogo                     Brand[]                 @relation("BrandsUsingLogo")                     
  collectionsUsingLogo                Collection[]            @relation("CollectionsUsingLogo")
}

// ----------- Orders -----------

model OrderItem {
  @@map(name: "orders_order_items")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  qtyOrdered                          Int                     @map("qty_ordered")
  qtyReceived                         Int?                    @map("qty_received")
  sellEx                              Decimal                 @db.Decimal(12,2) @map("sell_ex")
  sellGst                             Decimal                 @db.Decimal(12,2) @map("sell_gst")
  isEstimate                          Boolean                 @map("is_estimate")
  productBlob                         Json?                   @map("product_blob")

  orderId                             String                  @db.Uuid  @map("order_id")
  fdVariantId                         String                  @db.Uuid  @map("fd_variant_id")

  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()  

  order                               Order                   @relation(fields: [orderId], references: [id])
  variant                             Variant                 @relation(fields: [fdVariantId], references: [id])
}

model Order {
  @@map(name: "orders_orders")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  orderRef                            Int                     @default(autoincrement()) @map("order_ref")
  completedAt                         DateTime?               @map("completed_at") @db.Timestamptz()
  shippedAt                           DateTime?               @map("shipped_at") @db.Timestamptz()
  packedAt                            DateTime?               @map("packed_at") @db.Timestamptz()
  processedAt                         DateTime?               @map("processed_at") @db.Timestamptz()
  paidAt                              DateTime?               @map("paid_at") @db.Timestamptz()

  fdDeliveryLocationId                String                  @db.Uuid @map("fd_delivery_location_id")
  fdCustomerId                        String                  @db.Uuid @map("fd_customer_id")
  fdSupplierId                        String                  @db.Uuid @map("fd_supplier_id")
  fdOrdererId                         String                  @db.Uuid @map("fd_orderer_id")

  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()

  supplier                            Business                @relation(name: "SuppliedOrders", fields: [fdSupplierId], references: [id])
  customer                            Customer                @relation(fields: [fdCustomerId], references: [id])
  orderer                             User                    @relation(name: "OrdersPlaced", fields: [fdOrdererId], references: [id])
  deliveryLocation                    Place                   @relation(fields: [fdDeliveryLocationId], references: [id])
}

model Cart {
  @@map(name: "orders_carts")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  data                                Json

  fdCustomerId                        String                  @db.Uuid @map("fd_customer_id")
  fdUserId                            String                  @db.Uuid @map("fd_user_id")

  customer                            Customer                @relation(fields: [fdCustomerId], references: [id])
  user                                User                    @relation(fields: [fdUserId], references: [id])
}

model Invoice {
  @@map(name: "orders_invoices")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  invoiceRef                          Int                     @default(autoincrement()) @map("invoice_ref")
  generatedFileUrl                    String                  @map("generated_file_url")

  orderId                            String                  @db.Uuid @map("order_id")
  
  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()

  order                               Order                   @relation(fields: [orderId], references: [id])
}

// ----------- Payments -----------

enum PaymentMethodStatus {
  ACTIVE
  DISABLED
}

enum PaymentMethodType {
  CARD
  DIRECT_DEBIT
  ROLLING_ACCOUNT
  SUPPLIER_ACCOUNT
  CASH
  ADJUSTMENT  
}

model PaymentMethod {
  @@map(name: "payments_payment_methods")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type                                PaymentMethodType
  status                              PaymentMethodStatus     @default(ACTIVE)
  data                                Json?

  fdCustomerId                      String                  @db.Uuid @map("fd_customer_id")

  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()
  customer                            Customer                @relation(fields: [fdCustomerId], references: [id])
}

enum TransactionType {
  CHARGE
  REFUND
  ADJUSTMENT
}

model Payment {
  @@map(name: "payments_payments")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  receiptNumber                       Int?                    @default(autoincrement()) @map("receipt_number")
  notes                               String?
  amount                              Decimal?                @db.Decimal(12,2)
  transactionType                     TransactionType         @default(CHARGE)
  completedAt                         DateTime?               @map("completed_at") @db.Timestamptz()
  failedAt                            DateTime?               @map("failed_at") @db.Timestamptz()
  providerId                          String?
  data                                Json?

  paymentMethodId                     String                  @db.Uuid @map("payment_method_id")
  fdOrderId                           String                  @db.Uuid @map("fd_order_id")

  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()

  paymentMethod                       PaymentMethod           @relation(fields: [paymentMethodId], references: [id])
  order                               Order                   @relation(fields: [fdOrderId], references: [id])
}

// ----------- Places -----------

model Place {
  @@map(name: "places_places")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  countryCode                         String
  stateCode                           String
  suburb                              String  
  street                              String
  streetNumber                        String
  postcode                            String
  coordinates                         Unsupported("point")?
  providerId                          String?
  data                                Json?

  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()

  customers                           Customer[]              @relation("customers_customers_places")
}

model Region {
  @@map(name: "places_regions")
  id                                  String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                                String
  polygon                             Unsupported("polygon")?
  businessId                          String?                 @db.Uuid @map("business_id")
  
  createdAt                           DateTime                @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                           DateTime                @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
  deletedAt                           DateTime?               @map("deleted_at") @db.Timestamptz()

  business                            Business?               @relation(fields: [businessId], references: [id])
}


// The underlying table does not contain a valid unique identifier and can therefore currently not be handled. @db.Uuid
// model users_events {
  // @@map(name: "users_events")
  /// The value of this field is generated by the database as: `uuid_generate_v1()`.
  // id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  // event      String
  // data       Json?
  // user_uuid  String?
  // createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  // updatedAt DateTime @default(now()) @map("udpated_at") @db.Timestamptz() @updatedAt
// }
